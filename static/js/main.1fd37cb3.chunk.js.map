{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","components/Navigation.js","components/Detail.js","App.js","index.js"],"names":["Movie","id","title","summary","poster","year","genres","to","pathname","state","className","src","alt","style","backgroundColor","map","genre","index","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","About","Navigation","Detail","props","location","history","undefined","push","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iWA2CeA,MApCf,YAA2D,IAA3CC,EAA0C,EAA1CA,GAAGC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,KAAMC,EAAS,EAATA,OAC7C,OACI,cAAC,IAAD,CAAMC,GAAM,CACRC,SAAS,WAAD,OAAaP,GACrBQ,MAAQ,CACJJ,OACAH,QACAC,UACAC,SACAE,WAPR,SAWA,sBAAKI,UAAY,QAAjB,UACI,qBAAKC,IAAKP,EAAQQ,IAAKV,EAAOA,MAAOA,IACrC,sBAAKQ,UAAW,cAAhB,UACI,oBAAIA,UAAY,eAAeG,MAAS,CAACC,gBAAgB,QAAzD,SAAmEZ,IACnE,oBAAIQ,UAAY,cAAhB,SAA+BL,IAC/B,oBAAIK,UAAY,gBAAhB,SAAiCJ,EAAOS,KAAI,SAACC,EAAOC,GAAR,OAAkB,oBAAkBP,UAAY,gBAA9B,SAA+CM,GAApCC,QACzE,oBAAGP,UAAW,iBAAd,UAAgCP,EAAQe,MAAM,EAAE,KAAhD,kBCmHDC,G,kNAnDbV,MAAQ,CACNW,WAAW,EACXC,OAAQ,I,EAQVC,U,sBAAY,8BAAAC,EAAA,sEAMGC,IAAMC,IAAI,4DANb,gBAKEJ,EALF,EAIRK,KACEA,KAAQL,OAEV,EAAKM,SAAS,CAACN,SAAQD,WAAY,IAP3B,2C,kEAUVQ,KAAKN,c,+BAEE,IAAD,EACsBM,KAAKnB,MAA1BW,EADD,EACCA,UAAWC,EADZ,EACYA,OAClB,OACE,yBAASX,UAAY,aAArB,SACIU,EACA,qBAAKV,UAAY,SAAjB,SACA,sBAAMA,UAAU,eAAhB,0BAGD,qBAAKA,UAAY,SAAjB,SACGW,EAAON,KAAI,SAAAc,GAAK,OACf,cAAC,EAAD,CAEE5B,GAAM4B,EAAM5B,GACZC,MAAS2B,EAAM3B,MACfC,QAAW0B,EAAM1B,QACjBC,OAAQyB,EAAMC,mBACdzB,KAAMwB,EAAMxB,KACZC,OAAQuB,EAAMvB,QANPuB,EAAM5B,e,GApCT8B,IAAMC,Y,MCzEVC,MAZf,WACI,OACI,sBAAKvB,UAAU,mBAAf,UACE,gJAIA,kE,MCEKwB,MARf,WACI,OAAQ,gCACJ,cAAC,IAAD,CAAM3B,GAAK,IAAX,kBACA,cAAC,IAAD,CAAMA,GAAK,SAAX,uBCkBO4B,E,kLAtBU,IAAD,EACcP,KAAKQ,MAA3BC,EADQ,EACRA,SAAUC,EADF,EACEA,aACIC,IAAnBF,EAAS5B,OACR6B,EAAQE,KAAK,O,+BAGX,IACEH,EAAaT,KAAKQ,MAAlBC,SACR,OAAGA,EAAS5B,MAEJ,gCACF,6BAAK4B,EAAS5B,MAAMP,QACpB,6BAAKmC,EAAS5B,MAAMN,aAKf,S,GAlBE4B,IAAMC,W,MCmBZS,MAXf,WACE,OACA,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAazB,IACrC,cAAC,IAAD,CAAOuB,OAAK,EAACC,KAAO,SAASC,UAAaX,IAC1C,cAAC,IAAD,CAAOS,OAAK,EAACC,KAAO,cAAcC,UAAaT,QCXnDU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1fd37cb3.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport './Movie.css';\nimport { Link } from 'react-router-dom';\n\n//만약에 component가 state가 필요 없을 경우에는 class component로 할 필요 없다.\n//아래 이미지 소스에서 알트와 타이틀에 타이틀을 넣는 이유는 이미지 위에 커서를 올렸을 때 제목을 띄워주기 위해서이다.\nfunction Movie({id,title, summary, poster, year, genres}) {\n    return (\n        <Link to = {{\n            pathname: `/detail/${id}`,\n            state : {\n                year,\n                title,\n                summary,\n                poster,\n                genres\n            }\n        }}\n        >\n        <div className = \"movie\">\n            <img src={poster} alt={title} title={title}/>\n            <div className= \"movie__data\">\n                <h3 className = \"movie__title\" style = {{backgroundColor:\"blue\"}}>{title}</h3>\n                <h5 className = \"movie__year\">{year}</h5>\n                <ul className = \"movie__genres\">{genres.map((genre, index) => <li key = {index} className = \"genres__genre\">{genre}</li>)}</ul>\n                <p className= \"movie__summary\">{summary.slice(0,180)}...</p>\n                \n            </div>\n        </div>\n        </Link>\n    );\n}\n\nMovie.propTypes = {\n    id: propTypes.number.isRequired,\n    title : propTypes.string.isRequired,\n    summary : propTypes.string.isRequired,\n    poster : propTypes.string.isRequired,\n    year : propTypes.number.isRequired,\n    genres : propTypes.arrayOf(propTypes.string).isRequired\n};\n\nexport default Movie;","import React from 'react';\nimport axios from 'axios';\nimport Movie from '../components/Movie';\nimport './Home.css';\nimport propTypes from 'prop-types';\n/*  function을 사용하는 react\nfunction Food({name, picture, rating}) {\n  return (\n   <div>\n    <h1>I love {name} </h1>\n    <h4>{rating}/5.0</h4>\n    <img src = {picture} alt={name}/>\n  </div>\n  )}\n\nconst foodILike = [{\n  id:1,\n  name: \"Kimchi\",\n  image:\n    \"http://aeriskitchen.com/wp-content/uploads/2008/09/kimchi_bokkeumbap_02-.jpg\",\n  rating: 5\n},\n{\n  id:2,\n  name: \"Samgyeopsal\",\n  image:\n    \"https://3.bp.blogspot.com/-hKwIBxIVcQw/WfsewX3fhJI/AAAAAAAAALk/yHxnxFXcfx4ZKSfHS_RQNKjw3bAC03AnACLcBGAs/s400/DSC07624.jpg\",\n  rating:4.9\n},\n{\n  id:3,\n  name: \"Bibimbap\",\n  image:\n    \"http://cdn-image.myrecipes.com/sites/default/files/styles/4_3_horizontal_-_1200x900/public/image/recipes/ck/12/03/bibimbop-ck-x.jpg?itok=RoXlp6Xb\",\n  rating:4.5  \n},\n{\n  id:4,\n  name: \"Doncasu\",\n  image:\n    \"https://s3-media3.fl.yelpcdn.com/bphoto/7F9eTTQ_yxaWIRytAu5feA/ls.jpg\",\n  rating:5.5\n},\n{\n  id:5,\n  name: \"Kimbap\",\n  image:\n    \"http://cdn2.koreanbapsang.com/wp-content/uploads/2012/05/DSC_1238r-e1454170512295.jpg\",\n  rating:4.8\n}];\nFood.propTypes = {\n  name: propTypes.string.isRequired,\n  picture: propTypes.string.isRequired,\n  rating: propTypes.number\n};\n*/\n// function Food(Props) === function Food({fav})\n// props === property\n/*\nfunction App() {\n  return (\n    <div>\n      Hello!!!\n      {foodILike.map(dish => (\n        <Food key = {dish.id} \n        name = {dish.name} \n        picture={dish.image} \n        rating = {dish.rating}/>\n        ))}\n      \n    </div>\n  );\n}\n*/\n//React가 빠른 이유 : source code가 virtual - virtual DOM - react가 만들어 낸다\n//즉 react는 소스코드에 처음부터 HTML을 넣지 않고, HTML에서 HTML을 추가하거나 제거\n//따라서 application이 처음에 로드 할 때에는 빈 HTML을 밓어 넣고,\n//그런 다음에 react가 HTML(component에 작성해 뒀던 것을)을 밀어넣는다.냄\n\n//react사용 시 가장 중요한 것들 : \n//1. mounting : 태어나는 것(constructor : 자바스크립트에서 호출, \n// render, componentDidMount 등)\n//2. updating : 일반적인 업데이트 -> add또는 mount로 state를 변경할 때, 이러한 것이 업데이트.\n// render, componentDidUpdate. setState를 호출하면, component를 호출하고,\n//먼저 render를 호출한 다음 업데이트가 완료되었다고 말하면 componentDidUpdate가 실행된다.\n//3. unmounting : component가 죽는 것 : 보통 페이지가 바뀌거나 \n// state를 사용해서 component를 교체할 때 component가 죽는다. componentWillUnmount\n\nclass Home extends React.Component {\n  //데이터는 변하기 때문에 state를 사용한다.\n  state = {\n    isLoading: true,\n    movies: []\n  };\n  //setstate를 호출하는 순간마다 react는 재렌더링을 하게 된다.\n \n  //react는 자동적으로 class component의 render method를 실행한다.\n  //this.add()는 즉시 사용하는 것을 의미한다. \n  //onClick은 클릭시에만 사용되는 것이기 때문에 this.add()로 사용하지 않고, \n  //this.add로 사용해야 함.\n  getMovies = async () => {\n    //axios.get은 속도가 느리기 때문에 async,await 비동기 함수 사용한다. \n    //시간이 좀 필요하니 기다려야 한다.라는 의미.\n    const {\n      data: {\n        data : {movies}\n      }} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json/sort_by=rating\");\n      this.setState({movies, isLoading : false});\n  };\n  componentDidMount() {\n    this.getMovies();\n  }\n  render(){\n    const {isLoading, movies} = this.state;\n    return (\n      <section className = \"contatiner\">\n         {isLoading ? (\n          <div className = \"loader\"> \n          <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : ( \n         <div className = \"movies\">\n           {movies.map(movie => (\n             <Movie\n               key = {movie.id}\n               id = {movie.id}\n               title = {movie.title}\n               summary = {movie.summary}\n               poster={movie.medium_cover_image}\n               year={movie.year}\n               genres={movie.genres}\n             />\n           ))}\n         </div> \n        )}\n          \n      </section>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport './About.css';\n\nfunction About() {\n    return (\n        <div className=\"about__container\">\n          <span>\n            “Freedom is the freedom to say that two plus two make four. If that is\n            granted, all else follows.”\n          </span>\n          <span>− George Orwell, 1984</span>\n        </div>\n      );\n    }\n\nexport default About;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Navigation.css';\n\nfunction Navigation() {\n    return (<div>\n        <Link to = \"/\">Home</Link>\n        <Link to = \"/about\">About</Link>\n    </div>\n    );\n}\n\nexport default Navigation;","import React from 'react';\n\nclass Detail extends React.Component {\n    componentDidMount() {\n        const { location, history } = this.props;\n        if(location.state === undefined) {\n            history.push(\"/\");\n        }\n    }\n    render() {\n        const { location } = this.props;\n        if(location.state) {\n            return (\n                <div>\n              <h1>{location.state.title}</h1>\n              <h5>{location.state.summary}</h5>\n              </div>\n            );\n        }\n        else {\n            return null;\n        }\n    }\n}\n\nexport default Detail;","\nimport React from 'react';\nimport { HashRouter , Route } from 'react-router-dom';\nimport Home from './routes/Home';\nimport About from './routes/About';\nimport Navigation from './components/Navigation';\nimport Detail from './components/Detail';\nimport './App.css';\n\n//라우터 밖에서는 링크를 사용할 수 없다. 따라서 라우터 안에 네비게이션을 쓸 것 \nfunction App(){\n  return (\n  <HashRouter> \n    <Navigation /> \n    <Route exact path = \"/\" component = {Home}/>\n    <Route exact path = \"/about\" component = {About}/>\n    <Route exact path = \"/detail/:id\" component = {Detail}/>\n  </HashRouter>\n  );\n}\n\nexport default App;\n\n//라우터는 url을 가져다가 확인하고 사용 \n//라우트의 prop들은 렌더링할 스크린과 다른 prop은 뭘 할지 정해준다.","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n \n"],"sourceRoot":""}